// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.6.1
// source: shelter.proto

package shelter

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ShelterService_CreateShelter_FullMethodName = "/shelter.ShelterService/CreateShelter"
	ShelterService_UpdateShelter_FullMethodName = "/shelter.ShelterService/UpdateShelter"
	ShelterService_DeleteShelter_FullMethodName = "/shelter.ShelterService/DeleteShelter"
	ShelterService_GetShelter_FullMethodName    = "/shelter.ShelterService/GetShelter"
	ShelterService_GetShelters_FullMethodName   = "/shelter.ShelterService/GetShelters"
)

// ShelterServiceClient is the client API for ShelterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShelterServiceClient interface {
	CreateShelter(ctx context.Context, in *CreateShelterRequest, opts ...grpc.CallOption) (*CreateShelterResponse, error)
	UpdateShelter(ctx context.Context, in *UpdateShelterRequest, opts ...grpc.CallOption) (*ShelterResponse, error)
	DeleteShelter(ctx context.Context, in *DeleteShelterRequest, opts ...grpc.CallOption) (*DeleteShelterResponse, error)
	GetShelter(ctx context.Context, in *GetShelterRequest, opts ...grpc.CallOption) (*GetShelterResponse, error)
	GetShelters(ctx context.Context, in *GetSheltersRequest, opts ...grpc.CallOption) (*GetSheltersResponse, error)
}

type shelterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShelterServiceClient(cc grpc.ClientConnInterface) ShelterServiceClient {
	return &shelterServiceClient{cc}
}

func (c *shelterServiceClient) CreateShelter(ctx context.Context, in *CreateShelterRequest, opts ...grpc.CallOption) (*CreateShelterResponse, error) {
	out := new(CreateShelterResponse)
	err := c.cc.Invoke(ctx, ShelterService_CreateShelter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shelterServiceClient) UpdateShelter(ctx context.Context, in *UpdateShelterRequest, opts ...grpc.CallOption) (*ShelterResponse, error) {
	out := new(ShelterResponse)
	err := c.cc.Invoke(ctx, ShelterService_UpdateShelter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shelterServiceClient) DeleteShelter(ctx context.Context, in *DeleteShelterRequest, opts ...grpc.CallOption) (*DeleteShelterResponse, error) {
	out := new(DeleteShelterResponse)
	err := c.cc.Invoke(ctx, ShelterService_DeleteShelter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shelterServiceClient) GetShelter(ctx context.Context, in *GetShelterRequest, opts ...grpc.CallOption) (*GetShelterResponse, error) {
	out := new(GetShelterResponse)
	err := c.cc.Invoke(ctx, ShelterService_GetShelter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shelterServiceClient) GetShelters(ctx context.Context, in *GetSheltersRequest, opts ...grpc.CallOption) (*GetSheltersResponse, error) {
	out := new(GetSheltersResponse)
	err := c.cc.Invoke(ctx, ShelterService_GetShelters_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShelterServiceServer is the server API for ShelterService service.
// All implementations must embed UnimplementedShelterServiceServer
// for forward compatibility
type ShelterServiceServer interface {
	CreateShelter(context.Context, *CreateShelterRequest) (*CreateShelterResponse, error)
	UpdateShelter(context.Context, *UpdateShelterRequest) (*ShelterResponse, error)
	DeleteShelter(context.Context, *DeleteShelterRequest) (*DeleteShelterResponse, error)
	GetShelter(context.Context, *GetShelterRequest) (*GetShelterResponse, error)
	GetShelters(context.Context, *GetSheltersRequest) (*GetSheltersResponse, error)
	mustEmbedUnimplementedShelterServiceServer()
}

// UnimplementedShelterServiceServer must be embedded to have forward compatible implementations.
type UnimplementedShelterServiceServer struct {
}

func (UnimplementedShelterServiceServer) CreateShelter(context.Context, *CreateShelterRequest) (*CreateShelterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShelter not implemented")
}
func (UnimplementedShelterServiceServer) UpdateShelter(context.Context, *UpdateShelterRequest) (*ShelterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateShelter not implemented")
}
func (UnimplementedShelterServiceServer) DeleteShelter(context.Context, *DeleteShelterRequest) (*DeleteShelterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteShelter not implemented")
}
func (UnimplementedShelterServiceServer) GetShelter(context.Context, *GetShelterRequest) (*GetShelterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShelter not implemented")
}
func (UnimplementedShelterServiceServer) GetShelters(context.Context, *GetSheltersRequest) (*GetSheltersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShelters not implemented")
}
func (UnimplementedShelterServiceServer) mustEmbedUnimplementedShelterServiceServer() {}

// UnsafeShelterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShelterServiceServer will
// result in compilation errors.
type UnsafeShelterServiceServer interface {
	mustEmbedUnimplementedShelterServiceServer()
}

func RegisterShelterServiceServer(s grpc.ServiceRegistrar, srv ShelterServiceServer) {
	s.RegisterService(&ShelterService_ServiceDesc, srv)
}

func _ShelterService_CreateShelter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateShelterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShelterServiceServer).CreateShelter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShelterService_CreateShelter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShelterServiceServer).CreateShelter(ctx, req.(*CreateShelterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShelterService_UpdateShelter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateShelterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShelterServiceServer).UpdateShelter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShelterService_UpdateShelter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShelterServiceServer).UpdateShelter(ctx, req.(*UpdateShelterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShelterService_DeleteShelter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteShelterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShelterServiceServer).DeleteShelter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShelterService_DeleteShelter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShelterServiceServer).DeleteShelter(ctx, req.(*DeleteShelterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShelterService_GetShelter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShelterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShelterServiceServer).GetShelter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShelterService_GetShelter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShelterServiceServer).GetShelter(ctx, req.(*GetShelterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShelterService_GetShelters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSheltersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShelterServiceServer).GetShelters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShelterService_GetShelters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShelterServiceServer).GetShelters(ctx, req.(*GetSheltersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShelterService_ServiceDesc is the grpc.ServiceDesc for ShelterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShelterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shelter.ShelterService",
	HandlerType: (*ShelterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateShelter",
			Handler:    _ShelterService_CreateShelter_Handler,
		},
		{
			MethodName: "UpdateShelter",
			Handler:    _ShelterService_UpdateShelter_Handler,
		},
		{
			MethodName: "DeleteShelter",
			Handler:    _ShelterService_DeleteShelter_Handler,
		},
		{
			MethodName: "GetShelter",
			Handler:    _ShelterService_GetShelter_Handler,
		},
		{
			MethodName: "GetShelters",
			Handler:    _ShelterService_GetShelters_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shelter.proto",
}
